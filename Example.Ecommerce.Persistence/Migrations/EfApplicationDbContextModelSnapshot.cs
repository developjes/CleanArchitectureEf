// <auto-generated />
using System;
using Example.Ecommerce.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Example.Ecommerce.Persistence.Migrations
{
    [DbContext(typeof(EfApplicationDbContext))]
    partial class EfApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderAddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address")
                        .HasColumnOrder(2)
                        .HasComment("OrderAddress address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City")
                        .HasColumnOrder(3)
                        .HasComment("OrderAddress City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Country")
                        .HasColumnOrder(7)
                        .HasComment("OrderAddress Country");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(11)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Department")
                        .HasColumnOrder(4)
                        .HasComment("OrderAddress Department");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PostalCode")
                        .HasColumnOrder(5)
                        .HasComment("OrderAddress PostalCode");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username")
                        .HasColumnOrder(6)
                        .HasComment("OrderAddress Username");

                    b.HasKey("Id");

                    b.ToTable("OrderAddress", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BuyerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BuyerName")
                        .HasColumnOrder(2)
                        .HasComment("Order BuyerName");

                    b.Property<string>("BuyerUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BuyerUsername")
                        .HasColumnOrder(3)
                        .HasComment("Order BuyerUsername");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ClientSecret")
                        .HasColumnOrder(8)
                        .HasComment("OrderItem ClientSecret");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(13)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(16)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<int>("OrderAddressId")
                        .HasColumnType("int")
                        .HasColumnName("OrderAddressId")
                        .HasColumnOrder(12)
                        .HasComment("Order ForeignKey OrderAddress Table");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("PaymentIntentId")
                        .HasColumnOrder(10)
                        .HasComment("OrderItem PaymentIntentId");

                    b.Property<decimal>("ShippingPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("ShippingPrice")
                        .HasColumnOrder(7)
                        .HasComment("Order ShippingPrice");

                    b.Property<string>("StripeApiKey")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("StripeApiKey")
                        .HasColumnOrder(9)
                        .HasComment("Order StripeApiKey");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("SubTotal")
                        .HasColumnOrder(4)
                        .HasComment("Order SubTotal");

                    b.Property<decimal>("Tax")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Tax")
                        .HasColumnOrder(6)
                        .HasComment("Order Tax");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Total")
                        .HasColumnOrder(5)
                        .HasComment("Order Total");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("_stateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId")
                        .HasColumnOrder(11)
                        .HasComment("Order ForeignKey State Table");

                    b.HasKey("Id");

                    b.HasIndex("OrderAddressId")
                        .IsUnique();

                    b.HasIndex("_stateId");

                    b.ToTable("Order", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Amount")
                        .HasColumnOrder(3)
                        .HasComment("OrderItem Amount");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(9)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(12)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("ImageUrl")
                        .HasColumnOrder(5)
                        .HasComment("orderItem ImageUrl");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderId")
                        .HasColumnOrder(7)
                        .HasComment("OrderIdItem ForeignKey Order Table");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price")
                        .HasColumnOrder(2)
                        .HasComment("OrderItem price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(8)
                        .HasComment("OrderIdItem ForeignKey Product Table");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int")
                        .HasColumnName("ProductItemId")
                        .HasColumnOrder(6)
                        .HasComment("orderItem ProductItemId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ProductName")
                        .HasColumnOrder(4)
                        .HasComment("OrderItem ProductName");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId")
                        .HasColumnOrder(9)
                        .HasComment("Product ForeignKey Category Table");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(10)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(13)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Description")
                        .HasColumnOrder(4)
                        .HasComment("Product description");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Product Name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price")
                        .HasColumnOrder(3)
                        .HasComment("Product price");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating")
                        .HasColumnOrder(5)
                        .HasComment("Product rating");

                    b.Property<string>("Seller")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Seller")
                        .HasColumnOrder(7)
                        .HasComment("Product seller");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("Stock")
                        .HasColumnOrder(6)
                        .HasComment("Product stock");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("_stateId")
                        .HasColumnType("int")
                        .HasColumnName("StateId")
                        .HasColumnOrder(8)
                        .HasComment("Product ForeignKey State Table");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("_stateId");

                    b.ToTable("Product", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ProductImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(8)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(4)
                        .HasComment("ProductImage ForeignKey Product Table");

                    b.Property<string>("PublicCode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar")
                        .HasColumnName("PublicCode")
                        .HasColumnOrder(3)
                        .HasComment("ProductImage PublicCode");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("Url")
                        .HasColumnOrder(2)
                        .HasComment("ProductImage url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("Comment")
                        .HasColumnOrder(4)
                        .HasComment("Review comment");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(9)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Review Name");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(5)
                        .HasComment("Review ForeignKey Product Table");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("Rating")
                        .HasColumnOrder(3)
                        .HasComment("Review rating");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Review", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ShoppingCartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<Guid?>("ShoppingCartMasterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShoppingCartMasterId")
                        .HasColumnOrder(8)
                        .HasComment("ShoppingCartItem ShoppingCartMasterId");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShoppingCart", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ShoppingCartItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("Amount")
                        .HasColumnOrder(4)
                        .HasComment("ShoppingCartItem amount");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Category")
                        .HasColumnOrder(6)
                        .HasComment("ShoppingCartItem Category");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(11)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(14)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Image")
                        .HasColumnOrder(5)
                        .HasComment("ShoppingCartItem Image");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Price")
                        .HasColumnOrder(3)
                        .HasComment("ShoppingCartItem price");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Product")
                        .HasColumnOrder(2)
                        .HasComment("ShoppingCartItem Product");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductId")
                        .HasColumnOrder(9)
                        .HasComment("shoppingCartItem ProductId");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int")
                        .HasColumnName("ShoppingCartId")
                        .HasColumnOrder(10)
                        .HasComment("shoppingCartItem ForeignKey ShoppingCart Table");

                    b.Property<Guid?>("ShoppingCartMasterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShoppingCartMasterId")
                        .HasColumnOrder(8)
                        .HasComment("ShoppingCartItem ShoppingCartMasterId");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("Stock")
                        .HasColumnOrder(7)
                        .HasComment("ShoppingCartItem stock");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem", "Ecommerce");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Identity.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address")
                        .HasColumnOrder(2)
                        .HasComment("Address address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("City")
                        .HasColumnOrder(3)
                        .HasComment("Address City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Country")
                        .HasColumnOrder(7)
                        .HasComment("Address Country");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(8)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(11)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Department")
                        .HasColumnOrder(4)
                        .HasComment("Address Department");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PostalCode")
                        .HasColumnOrder(5)
                        .HasComment("Address PostalCode");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Username")
                        .HasColumnOrder(6)
                        .HasComment("Address Username");

                    b.HasKey("Id");

                    b.ToTable("Address", "Auth");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Identity.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Parametrization.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(3)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(6)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Category Name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", "Parametrization");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Parametrization.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(8)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Iso2")
                        .HasColumnOrder(3)
                        .HasComment("Country Iso2");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Iso3")
                        .HasColumnOrder(4)
                        .HasComment("Country Iso3");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Country Name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Country", "Parametrization");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Parametrization.StateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creacion del registro");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CreatedBy")
                        .HasColumnOrder(7)
                        .HasComment("Usuario que crea el registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Description")
                        .HasColumnOrder(3)
                        .HasComment("State Description");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LastModifiedBy")
                        .HasComment("Usuario que por ultima vez actualizo el registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("State Name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("State", "Parametrization");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Inactive state",
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Active state",
                            Name = "Active"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Pending state",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 4,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Completed state",
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 5,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Sent state",
                            Name = "Sent"
                        },
                        new
                        {
                            Id = 6,
                            CreateAt = new DateTime(2023, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Description = "Error state",
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Table Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.OrderAddressEntity", "OrderAddress")
                        .WithOne("Order")
                        .HasForeignKey("Example.Ecommerce.Domain.Entities.Ecommerce.OrderEntity", "OrderAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Example.Ecommerce.Domain.Entities.Parametrization.StateEntity", "State")
                        .WithMany("Orders")
                        .HasForeignKey("_stateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Order_State_StateId");

                    b.Navigation("OrderAddress");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderItemEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Parametrization.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Example.Ecommerce.Domain.Entities.Parametrization.StateEntity", "State")
                        .WithMany("Products")
                        .HasForeignKey("_stateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_State_StateId");

                    b.Navigation("Category");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ProductImageEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ReviewEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ShoppingCartItemEntity", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Ecommerce.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Example.Ecommerce.Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Example.Ecommerce.Domain.Entities.Identity.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderAddressEntity", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ProductEntity", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Ecommerce.ShoppingCartEntity", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Parametrization.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Example.Ecommerce.Domain.Entities.Parametrization.StateEntity", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
